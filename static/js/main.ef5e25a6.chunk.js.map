{"version":3,"sources":["styles/grid.module.css","logo.svg","components/NavBar.tsx","components/Todo/Todo.tsx","hooks/useTodoState.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NavBar","Navbar","bg","expand","Brand","to","className","TodoForm","props","saveTodo","useState","value","setValue","onSubmit","event","preventDefault","placeholder","onChange","e","target","TaskList","todos","deleteTodo","map","todo","index","onClick","Todo","initialValue","setTodos","addTodo","todoText","todoIndex","newTodos","filter","_","useTodoState","grid","container","trim","length","UnderConstruction","src","logo","alt","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,UAAY,wBAAwB,KAAO,qB,mBCD7DD,EAAOC,QAAU,IAA0B,kC,gLCiB5BC,EAbA,WACb,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACtB,kBAACF,EAAA,EAAOG,MAAR,KACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,kBAEF,kBAAC,IAAD,CAAMC,UAAU,WAAWD,GAAG,KAA9B,QACA,kBAAC,IAAD,CAAMC,UAAU,WAAWD,GAAG,UAA9B,SACA,kBAAC,IAAD,CAAMC,UAAU,WAAWD,GAAG,SAA9B,U,iCCcFE,EAAW,SAACC,GAA0B,IAClCC,EAAaD,EAAbC,SADiC,EAEfC,mBAAiB,IAFF,mBAElCC,EAFkC,KAE3BC,EAF2B,KAMzC,OACE,0BACEC,SAAU,SAACC,GACTA,EAAMC,iBAEFJ,GACFF,EAASE,GAGXC,EAAS,MAGX,2BAAOI,YAAY,WAAWL,MAAOA,EAAOM,SAftB,SAACC,GACzBN,EAASM,EAAEC,OAAOR,YAmBhBS,EAAW,SAACZ,GAAqE,IAC9Ea,EAAsBb,EAAtBa,MAAOC,EAAed,EAAfc,WACd,OACE,4BACGD,EAAME,KAAI,SAACC,EAAMC,GAChB,OAAO,4BAAI,4BAAQC,QAAS,kBAAMJ,EAAWG,KAAlC,UAAJ,MAAmED,QAMnEG,EAvDF,WAAM,MCHJ,SAACC,GAAiC,IAAD,EACpBlB,mBAAwBkB,GADJ,mBACvCP,EADuC,KAChCQ,EADgC,KAG9C,MAAO,CACLR,QACAS,QAAS,SAACC,GACRF,EAAS,GAAD,mBAAKR,GAAL,CAAYU,MAEtBT,WAAY,SAACU,GACX,IAAMC,EAAWZ,EAAMa,QAAO,SAACC,EAAYV,GAAb,OAA+BA,IAAUO,KAEvEH,EAASI,KDNwBG,CAAa,IAA3Cf,EAFU,EAEVA,MAAOS,EAFG,EAEHA,QAASR,EAFN,EAEMA,WAEvB,OACE,yBAAKhB,UAAW+B,IAAKC,WACnB,kBAAC,EAAD,CAAU7B,SAAU,SAACe,GACHA,EAAKe,OACTC,OAAS,GACnBV,EAAQN,MAGZ,kBAAC,EAAD,CAAUH,MAAOA,EAAOC,WAAYA,M,wBEIpCmB,G,YAAoB,WACxB,OACE,yBAAKnC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKoC,IAAKC,IAAMrC,UAAU,WAAWsC,IAAI,SACzC,qDAQOC,EA1BH,WACV,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,SAASC,UAAWR,IACtC,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,QAAQC,UAAWtB,OCHzBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ef5e25a6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"grid_container__Om6M3\",\"item\":\"grid_item__1RIHr\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Navbar } from 'react-bootstrap';\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = () => {\n  return (\n    <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand>\n          <Link to=\"/\">Michael Owens</Link>\n        </Navbar.Brand>\n        <Link className=\"nav-link\" to=\"/\">Home</Link>\n        <Link className=\"nav-link\" to=\"/about\">About</Link>\n        <Link className=\"nav-link\" to=\"/todo\">Todo</Link>\n      </Navbar>\n  );\n}\n\nexport default NavBar;\n","import React, { useState } from 'react';\nimport useTodoState from 'hooks/useTodoState';\n// import Button from 'react-bootstrap/Button';\nimport grid from 'styles/grid.module.css';\n\nconst Todo = () => {\n  // const [tasks, setTasks] = useState<Array<Task>>([{description: 'Task 1', done: false}, {description: 'Task 2', done: false}]);\n  const {todos, addTodo, deleteTodo} = useTodoState([]);\n\n  return (\n    <div className={grid.container}>\n      <TodoForm saveTodo={(todo) => {\n        const trimmed = todo.trim();\n        if (trimmed.length > 0) {\n          addTodo(todo);\n        }\n      }} />\n      <TaskList todos={todos} deleteTodo={deleteTodo} />\n    </div>\n  );\n}\n\ntype TodoFormProps = {\n  saveTodo: (todo: string) => void\n};\n\nconst TodoForm = (props: TodoFormProps) => {\n  const { saveTodo } = props;\n  const [value, setValue] = useState<string>('');\n  const handleInputChange = (e: any) => {\n    setValue(e.target.value);\n  }\n  return (\n    <form\n      onSubmit={(event: any) => {\n        event.preventDefault();\n        \n        if (value) {\n          saveTodo(value);\n        }\n    \n        setValue('');\n      }}\n    >\n      <input placeholder=\"Add todo\" value={value} onChange={handleInputChange} />\n    </form>\n  )\n}\n\nconst TaskList = (props: {todos: Array<string>, deleteTodo: (i: number) => void }) => {\n  const {todos, deleteTodo } = props;\n  return (\n    <ul>\n      {todos.map((todo, index) => {\n        return <li><button onClick={() => deleteTodo(index)} >Delete</button> - { todo }</li>\n      })}\n    </ul>\n  )\n}\n\nexport default Todo;\n","import { useState } from 'react';\n\nexport default (initialValue: Array<string>) => {\n  const [todos, setTodos] = useState<Array<string>>(initialValue);\n\n  return {\n    todos,\n    addTodo: (todoText: string) => {\n      setTodos([...todos, todoText]);\n    },\n    deleteTodo: (todoIndex: number) => {\n      const newTodos = todos.filter((_: unknown, index: number) => index !== todoIndex);\n\n      setTodos(newTodos);\n    }\n  };\n};","import React from 'react';\nimport NavBar from 'components/NavBar';\nimport Todo from 'components/Todo/Todo';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst App = () => {\n  return (\n    <HashRouter basename=\"/\">\n      <div>\n        <NavBar />\n        <Route exact path=\"/\" component={UnderConstruction} />\n        <Route exact path=\"/about\" component={UnderConstruction} />\n        <Route exact path=\"/todo\" component={Todo} />\n      </div>\n    </HashRouter>\n  );\n}\n\nconst UnderConstruction = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Under Construction\n        </p>\n      </header>\n     </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}